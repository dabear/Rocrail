///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version Sep 12 2010)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "hueconfdlggen.h"///////////////////////////////////////////////////////////////////////////HueConfDlgGen::HueConfDlgGen( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* bSizer9;	bSizer9 = new wxBoxSizer( wxVERTICAL );		wxFlexGridSizer* fgSizer17;	fgSizer17 = new wxFlexGridSizer( 0, 2, 0, 0 );	fgSizer17->AddGrowableCol( 1 );	fgSizer17->SetFlexibleDirection( wxBOTH );	fgSizer17->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_labIID = new wxStaticText( this, wxID_ANY, wxT("IID"), wxDefaultPosition, wxDefaultSize, 0 );	m_labIID->Wrap( -1 );	fgSizer17->Add( m_labIID, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );		m_IID = new wxComboBox( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, NULL, 0 ); 	fgSizer17->Add( m_IID, 0, wxRIGHT|wxLEFT|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5 );		bSizer9->Add( fgSizer17, 0, wxEXPAND, 5 );		m_HueBook = new wxNotebook( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0 );	m_LightsPanel = new wxPanel( m_HueBook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );	wxBoxSizer* bSizer10;	bSizer10 = new wxBoxSizer( wxVERTICAL );		m_LightsGrid = new wxGrid( m_LightsPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL );		// Grid	m_LightsGrid->CreateGrid( 5, 4 );	m_LightsGrid->EnableEditing( true );	m_LightsGrid->EnableGridLines( true );	m_LightsGrid->EnableDragGridSize( false );	m_LightsGrid->SetMargins( 0, 0 );		// Columns	m_LightsGrid->EnableDragColMove( false );	m_LightsGrid->EnableDragColSize( true );	m_LightsGrid->SetColLabelSize( 30 );	m_LightsGrid->SetColLabelAlignment( wxALIGN_CENTRE, wxALIGN_CENTRE );		// Rows	m_LightsGrid->EnableDragRowSize( true );	m_LightsGrid->SetRowLabelSize( 0 );	m_LightsGrid->SetRowLabelAlignment( wxALIGN_CENTRE, wxALIGN_CENTRE );		// Label Appearance		// Cell Defaults	m_LightsGrid->SetDefaultCellAlignment( wxALIGN_LEFT, wxALIGN_TOP );	bSizer10->Add( m_LightsGrid, 1, wxALL|wxEXPAND, 5 );		wxBoxSizer* bSizer11;	bSizer11 = new wxBoxSizer( wxHORIZONTAL );		m_GetLights = new wxButton( m_LightsPanel, wxID_ANY, wxT("Get"), wxDefaultPosition, wxDefaultSize, 0 );	bSizer11->Add( m_GetLights, 0, wxALL, 5 );		m_FindLights = new wxButton( m_LightsPanel, wxID_ANY, wxT("Find"), wxDefaultPosition, wxDefaultSize, 0 );	bSizer11->Add( m_FindLights, 0, wxALL, 5 );		bSizer10->Add( bSizer11, 0, wxEXPAND, 5 );		m_LightsPanel->SetSizer( bSizer10 );	m_LightsPanel->Layout();	bSizer10->Fit( m_LightsPanel );	m_HueBook->AddPage( m_LightsPanel, wxT("Lights"), false );		bSizer9->Add( m_HueBook, 1, wxEXPAND | wxALL, 5 );		m_stdButtons = new wxStdDialogButtonSizer();	m_stdButtonsOK = new wxButton( this, wxID_OK );	m_stdButtons->AddButton( m_stdButtonsOK );	m_stdButtonsHelp = new wxButton( this, wxID_HELP );	m_stdButtons->AddButton( m_stdButtonsHelp );	m_stdButtons->Realize();	bSizer9->Add( m_stdButtons, 0, wxEXPAND|wxALL, 5 );		this->SetSizer( bSizer9 );	this->Layout();	bSizer9->Fit( this );		this->Centre( wxBOTH );		// Connect Events	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( HueConfDlgGen::onClose ) );	m_LightsGrid->Connect( wxEVT_GRID_CELL_CHANGE, wxGridEventHandler( HueConfDlgGen::onLightCellChange ), NULL, this );	m_GetLights->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onGetLights ), NULL, this );	m_FindLights->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onFindLights ), NULL, this );	m_stdButtonsHelp->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onHelp ), NULL, this );	m_stdButtonsOK->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onOK ), NULL, this );}HueConfDlgGen::~HueConfDlgGen(){	// Disconnect Events	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( HueConfDlgGen::onClose ) );	m_LightsGrid->Disconnect( wxEVT_GRID_CELL_CHANGE, wxGridEventHandler( HueConfDlgGen::onLightCellChange ), NULL, this );	m_GetLights->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onGetLights ), NULL, this );	m_FindLights->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onFindLights ), NULL, this );	m_stdButtonsHelp->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onHelp ), NULL, this );	m_stdButtonsOK->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( HueConfDlgGen::onOK ), NULL, this );	}